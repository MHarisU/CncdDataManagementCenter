package com.cncd.first.UIs;

import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.Manifest;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.Toast;

import com.cncd.first.Models.PhoneModel.PhoneAdapter;
import com.cncd.first.Network.ApiPostRequest;
import com.cncd.first.Network.BaseUrl;
import com.cncd.first.Network.SessionManager;
import com.cncd.first.R;
import com.cncd.first.Utils.GeneralUtils;
import com.github.gcacace.signaturepad.views.SignaturePad;
import com.karumi.dexter.Dexter;
import com.karumi.dexter.PermissionToken;
import com.karumi.dexter.listener.PermissionDeniedResponse;
import com.karumi.dexter.listener.PermissionGrantedResponse;
import com.karumi.dexter.listener.PermissionRequest;
import com.karumi.dexter.listener.single.PermissionListener;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Calendar;

public class RecruitmentGeneralExclusionAndSpecificDiseaseActivity extends AppCompatActivity {

    LinearLayout layoutGlobalExclusion, layoutSelectCaseControl, layoutSelectCaseType, layoutParticipant, layoutNameAge, layoutSampling;

    CardView consentCard;

    String disease;
    String type;

    SignaturePad mSignaturePad;
    boolean signCheck = false;

    EditText participantAgeEdit, participantNameEdit, participantAddressEdit, participantNumberEdit, participantWhatsappEdit, participantNumberAdOn;
    RecyclerView contactRecycler;
    ArrayList<String> numbersAdList;


    RadioButton radioMale, radioFemale;

    String participantName;
    String participantAge;
    String participantAddress;
    String participantGender;
    String participantNumber;
    String participantWhatsapp;

    TextView globalExclusionText1, globalExclusionText2, globalExclusionText3, globalExclusionText4, globalExclusionText5;


    //Participant Study ID generated by API online
    String study_id = null;

    //Samples
    EditText samplesTemperature, edtaEdit, edtaQuantity, geltubeEdit, geltubeQuantity, urineEdit, urineQuantity,
            serumEdit, serumQuantity, plasmaEdit, plasmaQuantity, urineAliquotEdit, urineAliquotQuantity;
    CheckBox edtaCheckBox, geltubeCheckBox, urineCheckBox, serumCheckBox, plasmaCheckBox, urineAliquotCheckBox;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_recruitment_general_exclusion_and_specific_disease);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);

        numbersAdList = new ArrayList<>();
        loadUI();


        if (GeneralUtils.checkNumberValidation(this, "03473647030")) {
            Log.d("numberTage", "true");
        } else {
            Log.d("numberTage", "false");

        }
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        // super.onSaveInstanceState(outState);
        //Clear the Activity's bundle of the subsidiary fragments' bundles.
        outState.clear();
    }

    private void loadUI() {

        layoutGlobalExclusion = findViewById(R.id.layoutGlobalExclusion);
        layoutSelectCaseControl = findViewById(R.id.layoutSelectCaseControl);
        layoutSelectCaseType = findViewById(R.id.layoutSelectCaseType);
        layoutParticipant = findViewById(R.id.layoutParticipant);
        layoutNameAge = findViewById(R.id.layoutNameAge);
        consentCard = findViewById(R.id.consentCard);
        layoutSampling = findViewById(R.id.layoutSampling);


        mSignaturePad = (SignaturePad) findViewById(R.id.signature_pad);
        mSignaturePad.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                signCheck = true;
                return false;
            }
        });

        participantNameEdit = findViewById(R.id.participantName);
        participantAgeEdit = findViewById(R.id.participantAgeEdit);
        participantAddressEdit = findViewById(R.id.participantAddress);
        participantNumberEdit = findViewById(R.id.participantNumber);
        participantWhatsappEdit = findViewById(R.id.participantWhatsapp);


        radioMale = findViewById(R.id.radioMale);
        radioFemale = findViewById(R.id.radioFemale);


        globalExclusionText1 = findViewById(R.id.globalExclusionText1);
        globalExclusionText2 = findViewById(R.id.globalExclusionText2);
        globalExclusionText3 = findViewById(R.id.globalExclusionText3);
        globalExclusionText4 = findViewById(R.id.globalExclusionText4);
        globalExclusionText5 = findViewById(R.id.globalExclusionText5);

        //Samples
        samplesTemperature = findViewById(R.id.samplesTemperature);
        edtaEdit = findViewById(R.id.edtaEdit);
        edtaQuantity = findViewById(R.id.edtaQuantity);
        geltubeEdit = findViewById(R.id.geltubeEdit);
        geltubeQuantity = findViewById(R.id.geltubeQuantity);
        urineEdit = findViewById(R.id.urineEdit);
        urineQuantity = findViewById(R.id.urineQuantity);
        serumEdit = findViewById(R.id.serumEdit);
        serumQuantity = findViewById(R.id.serumQuantity);
        plasmaEdit = findViewById(R.id.plasmaEdit);
        plasmaQuantity = findViewById(R.id.plasmaQuantity);
        urineAliquotEdit = findViewById(R.id.urineAliquotEdit);
        urineAliquotQuantity = findViewById(R.id.urineAliquotQuantity);

        edtaCheckBox = findViewById(R.id.edtaCheckBox);
        geltubeCheckBox = findViewById(R.id.geltubeCheckBox);
        urineCheckBox = findViewById(R.id.urineCheckBox);
        serumCheckBox = findViewById(R.id.serumCheckBox);
        plasmaCheckBox = findViewById(R.id.plasmaCheckBox);
        urineAliquotCheckBox = findViewById(R.id.urineAliquotCheckBox);

        contactRecycler = findViewById(R.id.contactRecycler);
        participantNumberAdOn = findViewById(R.id.participantNumberAdOn);


    }

    public void globalRecruitmentExclusionYes(View view) {
        GeneralUtils.alertDialogBoxSimpleCloseActivity(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Info", "This case can not be registered");
    }

    public void globalRecruitmentExclusionContinue(View view) {

        if (globalExclusionText1.getText().toString().equals("No") && globalExclusionText2.getText().toString().equals("No")
                && globalExclusionText3.getText().toString().equals("No") && globalExclusionText4.getText().toString().equals("No") && globalExclusionText5.getText().toString().equals("No")) {


            layoutGlobalExclusion.setVisibility(View.GONE);
            layoutSelectCaseType.setVisibility(View.VISIBLE);
            Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                    R.anim.slide_in_bottom);
            layoutSelectCaseType.startAnimation(slide_up);
        } else {
            GeneralUtils.alertDialogBoxSimple(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Info", "This case can not be registered");
        }

    }

    public void CloseForm(View view) {
        finish();
    }


    public void selectCase(View view) {

        ArrayList<String> participantDetails = new ArrayList<>();
        participantDetails.add(participantName);
        participantDetails.add(participantAge);
        participantDetails.add(participantGender);
        participantDetails.add(participantAddress);
        participantDetails.add(participantNumber);
        participantDetails.add(participantWhatsapp);

        Intent intent = null;


        if (disease.equals("MI")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, MICaseExclusionInclusionCriteriaActivity.class);
        } else if (disease.equals("HF")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, HfCaseExclusionInclusionCriteriaActivity.class);
        } else if (disease.equals("STR")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, StrokeCaseExclusionInclusionCriteriaActivity.class);
        } else if (disease.equals("NAFLD")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, NAFLDCaseExclusionInclusionCriteriaActivity.class);
        } else if (disease.equals("T2D")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, TypeTwoDiabetesExclusionInclusionCriteriaActivity.class);
        }


        intent.putStringArrayListExtra("participantData", participantDetails);
        startActivity(intent);
        finish();
    }

    public void diseaseTypeMI(View view) {

        disease = "MI";

        layoutSelectCaseType.setVisibility(View.GONE);
        layoutSelectCaseControl.setVisibility(View.VISIBLE);
        Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                R.anim.slide_in_bottom);
        layoutSelectCaseControl.startAnimation(slide_up);
    }

    public void diseaseTypeHF(View view) {


        disease = "HF";

        layoutSelectCaseType.setVisibility(View.GONE);
        layoutSelectCaseControl.setVisibility(View.VISIBLE);
        Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                R.anim.slide_in_bottom);
        layoutSelectCaseControl.startAnimation(slide_up);

    }

    public void diseaseTypeStroke(View view) {

        disease = "STR";

        layoutSelectCaseType.setVisibility(View.GONE);
        layoutSelectCaseControl.setVisibility(View.VISIBLE);
        Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                R.anim.slide_in_bottom);
        layoutSelectCaseControl.startAnimation(slide_up);
    }

    public void diseaseTypeNAFLD(View view) {


        disease = "NAFLD";

        layoutSelectCaseType.setVisibility(View.GONE);
        layoutSelectCaseControl.setVisibility(View.VISIBLE);
        Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                R.anim.slide_in_bottom);
        layoutSelectCaseControl.startAnimation(slide_up);

    }

    public void diseaseTypeT2D(View view) {


        disease = "T2D";

        layoutSelectCaseType.setVisibility(View.GONE);
        layoutSelectCaseControl.setVisibility(View.VISIBLE);
        Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                R.anim.slide_in_bottom);
        layoutSelectCaseControl.startAnimation(slide_up);

    }

    public void selectControl(View view) {


        ArrayList<String> participantDetails = new ArrayList<>();
        participantDetails.add(participantName);
        participantDetails.add(participantAge);
        participantDetails.add(participantGender);
        participantDetails.add(participantAddress);
        participantDetails.add(participantNumber);
        participantDetails.add(participantWhatsapp);


        Intent intent = null;
        if (disease.equals("MI")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, MIControlExclusionInclusionCriteriaActivity.class);
        } else if (disease.equals("HF")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, HfControlExclusionInclusionCriteriaActivity.class);
        } else if (disease.equals("STR")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, StrokeControlExclusionInclusionCriteriaActivity.class);
        } else if (disease.equals("NAFLD")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, NAFLDControlExclusionInclusionCriteriaActivity.class);
        } else if (disease.equals("T2D")) {
            intent = new Intent(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, TypeTwoDiabetesControlExclusionInclusionCriteriaActivity.class);
        }

        intent.putStringArrayListExtra("participantData", participantDetails);
        startActivity(intent);
        finish();
    }

    public void clearPad(View view) {
        signCheck = false;

        mSignaturePad.clear();
    }

    public void participantNameAgeEntered(View view) {

        participantName = participantNameEdit.getText().toString();
        participantAge = participantAgeEdit.getText().toString();
        participantAddress = participantAddressEdit.getText().toString();
        participantGender = "Male";
        participantNumber = participantNumberEdit.getText().toString();
        participantWhatsapp = participantWhatsappEdit.getText().toString();

        if (radioMale.isChecked()) {
            participantGender = "Male";
        } else if (radioFemale.isChecked()) {
            participantGender = "Female";
        }


        if (participantName != null && !participantName.equals("") &&
                participantAge != null && !participantAge.equals("") &&
                participantAddress != null && !participantAddress.equals("") &&
                participantGender != null && !participantGender.equals("") &&
                participantNumber != null && !participantNumber.equals("") &&
                participantWhatsapp != null && !participantWhatsapp.equals("")) {


            if (Integer.parseInt(participantAge) < 18) {

                GeneralUtils.alertDialogBoxSimpleCloseActivity(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Info", "Your are under 18 years, case can not be registered.");


            } else {

                if (GeneralUtils.checkNumberValidation(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, participantNumber) &&
                        GeneralUtils.checkNumberValidation(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, participantWhatsapp)) {

                    registerParticipantApiCall();

                    GeneralUtils.hideSoftKeyboard(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, participantAgeEdit);
                    layoutNameAge.setVisibility(View.GONE);
                    consentCard.setVisibility(View.VISIBLE);
                    Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                            R.anim.slide_in_bottom);
                    consentCard.startAnimation(slide_up);
                    //Toast.makeText(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Valid", Toast.LENGTH_SHORT).show();

                } else {

                    GeneralUtils.alertDialogBoxSimple(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Info", "Not valid phone number.");

                }
            }


            //Toast.makeText(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, participantName + "\n" + participantAge + "\n" + participantAddress + "\n" + participantGender + "\n", Toast.LENGTH_SHORT).show();
        } else {
            GeneralUtils.alertDialogBoxSimple(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Info", "Please fill all fields correctly");

        }


    }


    public void consentFormAgree(View view) {

        if (!signCheck) {
            GeneralUtils.alertDialogBoxSimple(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Info", "Please sign to agree");

        } else {

            consentCard.setVisibility(View.GONE);
            layoutSampling.setVisibility(View.VISIBLE);
            Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                    R.anim.slide_in_bottom);
            layoutSampling.startAnimation(slide_up);

/*
            layoutGlobalExclusion.setVisibility(View.VISIBLE);
            Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                    R.anim.slide_in_bottom);
            layoutGlobalExclusion.startAnimation(slide_up);*/
        }

    }

    public void viewAllConsentForms(View view) {
        LinearLayout all_consent_layout = findViewById(R.id.all_consent_layout);
        TextView view_all_button = findViewById(R.id.view_all_button);

        view_all_button.setVisibility(View.GONE);
        all_consent_layout.setVisibility(View.VISIBLE);
    }

    public void samplesCollected(View view) {


        String temperature = samplesTemperature.getText().toString();
        String edtaT = edtaEdit.getText().toString();
        String edtaQ = edtaQuantity.getText().toString();
        String gelT = geltubeEdit.getText().toString();
        String gelQ = geltubeQuantity.getText().toString();
        String urineT = urineEdit.getText().toString();
        String urineQ = urineQuantity.getText().toString();
        String serumT = serumEdit.getText().toString();
        String serumQ = serumQuantity.getText().toString();
        String plasmaT = plasmaEdit.getText().toString();
        String plasmaQ = plasmaQuantity.getText().toString();
        String urineAT = urineAliquotEdit.getText().toString();
        String urineAQ = urineAliquotQuantity.getText().toString();


        boolean checkAll = true;
        if (edtaCheckBox.isChecked()) {
            if (edtaT == null || edtaT.equals("") || edtaQ == null || edtaQ.equals("")) {
                checkAll = false;
            }
        }
        if (geltubeCheckBox.isChecked()) {
            if (gelT == null || gelT.equals("") || gelQ == null || gelQ.equals("")) {
                checkAll = false;
            }
        }
        if (urineCheckBox.isChecked()) {
            if (urineT == null || urineT.equals("") || urineQ == null || urineQ.equals("")) {
                checkAll = false;
            }
        }
        if (serumCheckBox.isChecked()) {
            if (serumT == null || serumT.equals("") || serumQ == null || serumQ.equals("")) {
                checkAll = false;
            }
        }
        if (plasmaCheckBox.isChecked()) {
            if (plasmaT == null || plasmaT.equals("") || plasmaQ == null || plasmaQ.equals("")) {
                checkAll = false;
            }
        }
        if (urineAliquotCheckBox.isChecked()) {
            if (urineAT == null || urineAT.equals("") || urineAQ == null || urineAQ.equals("")) {
                checkAll = false;
            }
        }

        if (checkAll) {

            sampleApiCall(temperature, edtaT, edtaQ, gelT, gelQ, urineT, urineQ, serumT, serumQ, plasmaT, plasmaQ, urineAT, urineAQ);


            layoutSampling.setVisibility(View.GONE);
            layoutGlobalExclusion.setVisibility(View.VISIBLE);
            Animation slide_up = AnimationUtils.loadAnimation(getApplicationContext(),
                    R.anim.slide_in_bottom);
            layoutGlobalExclusion.startAnimation(slide_up);
        } else {
            Toast.makeText(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Please fill all fields correctly for checked tubes", Toast.LENGTH_SHORT).show();
        }


    }

    private void sampleApiCall(String temperature, String edtaT, String edtaQ, String gelT, String gelQ, String urineT, String urineQ, String serumT, String serumQ, String plasmaT, String plasmaQ, String urineAT, String urineAQ) {


        JSONObject orderJsonObject = new JSONObject();
        try {
            orderJsonObject.put("token", new SessionManager(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this).getToken());
            orderJsonObject.put("study_id", study_id);
            orderJsonObject.put("temperature", temperature.isEmpty() ? "0" : temperature);

            JSONArray jsonArray = new JSONArray();
            if (edtaCheckBox.isChecked()) {
                JSONObject object = new JSONObject();
                object.put("tube", "edta");
                object.put("number_of_tubes", edtaT);
                object.put("quantity", edtaQ);
                jsonArray.put(object);
            }
            if (geltubeCheckBox.isChecked()) {
                JSONObject object = new JSONObject();
                object.put("tube", "gel");
                object.put("number_of_tubes", gelT);
                object.put("quantity", gelQ);
                jsonArray.put(object);

            }
            if (urineCheckBox.isChecked()) {
                JSONObject object = new JSONObject();
                object.put("tube", "urine");
                object.put("number_of_tubes", urineT);
                object.put("quantity", urineQ);
                jsonArray.put(object);

            }

            if (serumCheckBox.isChecked()) {
                JSONObject object = new JSONObject();
                object.put("tube", "serum");
                object.put("number_of_tubes", serumT);
                object.put("quantity", serumQ);
                jsonArray.put(object);

            }
            if (plasmaCheckBox.isChecked()) {
                JSONObject object = new JSONObject();
                object.put("tube", "plasma");
                object.put("number_of_tubes", plasmaT);
                object.put("quantity", plasmaQ);
                jsonArray.put(object);

            }
            if (urineAliquotCheckBox.isChecked()) {
                JSONObject object = new JSONObject();
                object.put("tube", "urine_a");
                object.put("number_of_tubes", urineAT);
                object.put("quantity", urineAQ);
                jsonArray.put(object);

            }

            orderJsonObject.put("sample", jsonArray);
            ///////

        } catch (JSONException e) {
            e.printStackTrace();
        }

        final String requestBody = orderJsonObject.toString();
        Log.d("response", requestBody);


        new ApiPostRequest(
                RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this,
                new BaseUrl().getBaseUrl() + "/dms/apis/sample",
                requestBody,
                new ApiPostRequest.AsyncApiResponse() {
                    @Override
                    public void processFinish(String response) {


                        Log.d("response", response);

                        JSONObject jsonObject = null;
                        try {
                            jsonObject = new JSONObject(response);
                        } catch (JSONException jsonException) {
                            jsonException.printStackTrace();
                        }

                        try {
                            JSONObject jsonResponse = jsonObject.getJSONObject("Response");
                            String jsonStatus = jsonResponse.getString("Status");

                            if (jsonStatus.equals("true")) {


                            } else {

                                final AlertDialog.Builder aDialog = new AlertDialog.Builder(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, R.style.DialogTheme)
                                        .setTitle("")
                                        .setMessage("Invalid request please login or try again later")
                                        .setCancelable(false)
                                        .setNegativeButton("OK", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialogInterface, int i) {

                                            }
                                        });
                                aDialog.show();
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                            Toast.makeText(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Json Error.", Toast.LENGTH_SHORT).show();
                        }

                    }
                }
        );


    }


    private void registerParticipantApiCall() {


        JSONObject orderJsonObject = new JSONObject();
        try {
            orderJsonObject.put("token", new SessionManager(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this).getToken());
            orderJsonObject.put("user_id", new SessionManager(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this).getUserId());
            orderJsonObject.put("center_id", "ABD");
            orderJsonObject.put("p_name", participantName);
            orderJsonObject.put("p_age", participantAge);
            orderJsonObject.put("p_gender", participantGender.equals("Male") ? "Male" : "Female");
            orderJsonObject.put("p_address", participantAddress);
            orderJsonObject.put("p_phone", participantNumber);
            orderJsonObject.put("p_whatsapp", participantWhatsapp);

            ///////

        } catch (JSONException e) {
            e.printStackTrace();
        }

        final String requestBody = orderJsonObject.toString();

        new ApiPostRequest(
                RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this,
                new BaseUrl().getBaseUrl() + "/dms/apis/registration",
                requestBody,
                new ApiPostRequest.AsyncApiResponse() {
                    @Override
                    public void processFinish(String response) {


                        Log.d("response", response);

                        JSONObject jsonObject = null;
                        try {
                            jsonObject = new JSONObject(response);
                        } catch (JSONException jsonException) {
                            jsonException.printStackTrace();
                        }

                        try {
                            JSONObject jsonResponse = jsonObject.getJSONObject("Response");
                            String jsonStatus = jsonResponse.getString("Status");

                            if (jsonStatus.equals("true")) {
                                JSONArray jsonDataArray = jsonResponse.getJSONArray("Data");
                                JSONObject jsonData = jsonDataArray.getJSONObject(0);

                                study_id = jsonData.getString("study_id");
                                Log.d("response", study_id);


                            } else {

                                final AlertDialog.Builder aDialog = new AlertDialog.Builder(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, R.style.DialogTheme)
                                        .setTitle("")
                                        .setMessage("Invalid request please login or try again later")
                                        .setCancelable(false)
                                        .setNegativeButton("OK", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialogInterface, int i) {

                                            }
                                        });
                                aDialog.show();
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                            Toast.makeText(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Json Error.", Toast.LENGTH_SHORT).show();
                        }

                    }
                }
        );


    }

    public void selectYesNoNot(View view) {
        GeneralUtils.selectYesNo(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, view);
    }

    public void callNumber(View view) {
        if (participantNumberEdit.getText().toString().equals("")) {
            Toast.makeText(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Please add phone number", Toast.LENGTH_SHORT).show();
        } else {

            Dexter.withContext(this)
                    .withPermission(Manifest.permission.CALL_PHONE)
                    .withListener(new PermissionListener() {
                        @Override
                        public void onPermissionGranted(PermissionGrantedResponse response) {


                            // TODO Auto-generated method stub
                            Intent i = new Intent(Intent.ACTION_CALL);
                            i.setData(Uri.parse("tel:" + participantNumberEdit.getText().toString()));
                            startActivity(i);

                        }

                        @Override
                        public void onPermissionDenied(PermissionDeniedResponse response) {/* ... */}

                        @Override
                        public void onPermissionRationaleShouldBeShown(PermissionRequest permission, PermissionToken token) {
                            token.continuePermissionRequest();
                        }
                    }).check();

        }
    }

    public void adOnNumberAdd(View view) {
        String numberAdOn = participantNumberAdOn.getText().toString();
        if (GeneralUtils.checkNumberValidation(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, numberAdOn)) {

            numbersAdList.add(numberAdOn);

            contactRecycler = findViewById(R.id.contactRecycler);
            LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
            contactRecycler.setLayoutManager(linearLayoutManager);

            PhoneAdapter adapter = new PhoneAdapter(numbersAdList, RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this);
            contactRecycler.setAdapter(adapter);
            participantNumberAdOn.setText("");

        } else
            GeneralUtils.alertDialogBoxSimple(RecruitmentGeneralExclusionAndSpecificDiseaseActivity.this, "Info", "Not valid phone number.");

    }
}